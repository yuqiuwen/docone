"use strict";(self.webpackChunkdocone=self.webpackChunkdocone||[]).push([[640],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},36363:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(87462),a=(t(67294),t(3905));const o={title:"python asyncio",authors:"Qiuwen",description:"\u4f7f\u7528\u534f\u7a0b\u8bf7\u6c42\u7f51\u5740\u5e76\u89e3\u6790github DNS IP, \u66ff\u6362hosts\u6587\u4ef6\u5185\u5bb9\u3002\u6700\u540e\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6",tags:["\u534f\u7a0b","\u5e76\u53d1\u7f16\u7a0b","\u722c\u866b","\u811a\u672c\u5f00\u53d1"],date:"2023-01-07 17:57"},i=void 0,s={permalink:"/docone/blog/2022/12/14/python-notes/python\u534f\u7a0b\u6848\u4f8b",source:"@site/blog/2022-12-14-python-notes/python\u534f\u7a0b\u6848\u4f8b.md",title:"python asyncio",description:"\u4f7f\u7528\u534f\u7a0b\u8bf7\u6c42\u7f51\u5740\u5e76\u89e3\u6790github DNS IP, \u66ff\u6362hosts\u6587\u4ef6\u5185\u5bb9\u3002\u6700\u540e\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6",date:"2023-01-07T17:57:00.000Z",formattedDate:"January 7, 2023",tags:[{label:"\u534f\u7a0b",permalink:"/docone/blog/tags/\u534f\u7a0b"},{label:"\u5e76\u53d1\u7f16\u7a0b",permalink:"/docone/blog/tags/\u5e76\u53d1\u7f16\u7a0b"},{label:"\u722c\u866b",permalink:"/docone/blog/tags/\u722c\u866b"},{label:"\u811a\u672c\u5f00\u53d1",permalink:"/docone/blog/tags/\u811a\u672c\u5f00\u53d1"}],readingTime:3.33,hasTruncateMarker:!1,authors:[{name:"Qiuwen",title:"FullStack Engineer @ Facebook",url:"https://github.com/yuqiuwen",key:"Qiuwen"}],frontMatter:{title:"python asyncio",authors:"Qiuwen",description:"\u4f7f\u7528\u534f\u7a0b\u8bf7\u6c42\u7f51\u5740\u5e76\u89e3\u6790github DNS IP, \u66ff\u6362hosts\u6587\u4ef6\u5185\u5bb9\u3002\u6700\u540e\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6",tags:["\u534f\u7a0b","\u5e76\u53d1\u7f16\u7a0b","\u722c\u866b","\u811a\u672c\u5f00\u53d1"],date:"2023-01-07 17:57"},prevItem:{title:"Git Notes",permalink:"/docone/blog/2023/04/12/git-notes/Git Notes"},nextItem:{title:"Back-End Notes",permalink:"/docone/blog/2022/12/14/python-notes/python notes"}},l={authorsImageUrls:[void 0]},p=[{value:"\u534f\u7a0b",id:"\u534f\u7a0b",level:2},{value:"\u6848\u4f8b",id:"\u6848\u4f8b",level:3},{value:"\u811a\u672c\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6",id:"\u811a\u672c\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6",level:2}],c={toc:p};function u(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"\u534f\u7a0b"},"\u534f\u7a0b"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"\u5355\u7ebf\u7a0b\u5b8c\u6210\u591a\u4efb\u52a1\uff0c\u591a\u4e2a\u4efb\u52a1\u6309\u7167\u4e00\u5b9a\u987a\u5e8f\u4ea4\u66ff\u6267\u884c\u3002")),(0,a.kt)("p",null,"await\u540e\u9762\u4e3a\u53ef\u7b49\u5f85\u5bf9\u8c61\uff0c\u5305\u542b\u4e09\u7c7b\uff1a",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"coroutine"),": \u534f\u7a0b\u51fd\u6570\u7684\u8fd4\u56de\u5bf9\u8c61",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"Task"),": \u4efb\u52a1\uff0c\u5bf9\u534f\u7a0b\u8fdb\u4e00\u6b65\u5c01\u88c5\uff0c\u5176\u4e2d\u5305\u542b\u4e86\u4efb\u52a1\u7684\u5404\u79cd\u72b6\u6001",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"Future"),"\uff1a\u6700\u5e95\u5c42\u7684\u5bf9\u8c61\uff0c\u8868\u793a\u4e00\u4e2a\u5f02\u6b65\u64cd\u4f5c\u7684\u6700\u7ec8\u7ed3\u679c  "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"\u5982\u4f55\u521b\u5efa\u4efb\u52a1\uff1f"),(0,a.kt)("br",{parentName:"p"}),"\n","\u9700\u8981\u5728\u53e6\u4e00\u4e2a\u534f\u7a0b\u51fd\u6570\u4e2d\u521b\u5efa\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u4e24\u79cd\u65b9\u5f0f:",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"create_task"),": \u53c2\u6570\u5bf9\u8c61\u5fc5\u987b\u662fcoroutine",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("inlineCode",{parentName:"p"},"ensure_future"),": coroutine\u6216future\u7686\u53ef"),(0,a.kt)("p",null,"\u6700\u540e\u901a\u8fc7",(0,a.kt)("inlineCode",{parentName:"p"},"asyncio.get_event_loop()"),"\u5c06\u534f\u7a0b\u5bf9\u8c61\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5e76\u6267\u884c"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import asyncio\n\n\nasync def task1(x):\n    print("task1\u5f00\u59cb")\n    # \u6267\u884c\u5230await\u65f6\u4efb\u52a1\u88ab\u6302\u8d77\uff0c\u8df3\u5230\u4e0b\u4e00\u4e2a\u4efb\u52a1\n    await asyncio.sleep(1)\n    print("task1\u5b8c\u6210")\n    return x ** 2\n\n\nasync def task2(y):\n    print("task2\u5f00\u59cb")\n    await asyncio.sleep(2)\n    print("task2\u5b8c\u6210")\n    return y ** 2\n\n\nasync def main():\n    # \u534f\u7a0b\u5bf9\u8c61\uff0c\u8be5\u5bf9\u8c61\u4e0d\u80fd\u76f4\u63a5\u8fd0\u884c\n    coroutine1 = task1(2)\n    coroutine2 = task2(3)\n    await asyncio.gather(coroutine1, coroutine2)\n\n    \n# python3.7\u7248\u672c\u53ca\u4e4b\u540e\u5b9e\u73b0\u534f\u7a0b\nasyncio.run(main())\n\n# python3.7\u4e4b\u524d\n# # \u4e8b\u4ef6\u5faa\u73af\u5bf9\u8c61\n# loop = asyncio.get_event_loop()\n# # \u5c06\u534f\u7a0b\u5bf9\u8c61\u6ce8\u518c\u5230\u4e8b\u4ef6\u5faa\u73af\u4e2d\uff0c\u5e76\u6267\u884c\n# ret = loop.run_until_complete(coroutine1)\n# print(ret)\n\n')),(0,a.kt)("h3",{id:"\u6848\u4f8b"},"\u6848\u4f8b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'"""  \nIn order to solve the problem that github cannot be accessed,  \nby replacing ip in the hosts file  \n"""  \nimport ctypes  \nimport os, sys  \nimport traceback  \n  \nimport aiohttp  \nimport asyncio  \nfrom fake_useragent import UserAgent  \nfrom lxml import etree  \nfrom functools import partial  \nimport shutil  \n  \n  \nua = UserAgent(use_external_data=True)  \nip_dict = dict()  \n  \n  \ndef build_headers():  \n    headers = {  \n        \'use_agent\': ua.random  \n    }  \n    return headers  \n  \n  \nasync def fetch_latest_ip(url):  \n    async with aiohttp.ClientSession(headers=build_headers()) as session:  \n        async with session.get(url) as response:  \n            result = await response.text()  \n            html = etree.HTML(result)  \n            ip = html.xpath("//th[text()=\'IPv4 Addresses\']/following-sibling::td//text()")  \n            print(f"\u6b63\u5728\u83b7\u53d6ip: {url}\\n\u89e3\u6790\u5b8c\u6210: {ip}")  \n            return ip  \n  \n          \nasync def main():  \n    base_url = \'https://www.ipaddress.com/site/\'  \n    targets = (  \n        \'github.com\',  \n        \'assets-cdn.github.com\',  \n        \'github.global.ssl.fastly.net\'  \n    )  \n    tasks = []  \n    for url in targets:  \n        task = asyncio.ensure_future(fetch_latest_ip(base_url + url))  \n        # \u56de\u8c03  \n        task.add_done_callback(partial(parse, url))  \n        tasks.append(task)  \n    await asyncio.gather(*tasks)  \n  \n  \ndef parse(url, task):  \n    ip_dict[url] = task.result()  \n  \n  \ndef save():  \n    host = r\'C:/Windows/System32/drivers/etc/hosts\'  \n    temp = r\'./temp\'  \n    try:  \n        if not os.path.exists(host):  \n            print("hosts\u6587\u4ef6\u4e0d\u5b58\u5728")  \n            return False  \n        with open(host, mode=\'r\') as f1, open(temp, mode=\'w\') as f2:  \n            lines = f1.readlines()  \n            for line in reversed(lines):  \n                if \'github.\' in line:  \n                    lines.remove(line)  \n  \n            for name in ip_dict:  \n                for ip in ip_dict[name]:  \n                    lines.append(f"{ip} {name}\\n")  \n            # \u63d0\u53d6\u4e00\u884c\u4e2d\u7684ip\u548cname  \n            # ip, name = re.split(r"\\s+", line)            f2.writelines(lines)  \n  \n        os.remove(host)  \n        shutil.copy(temp, host)  \n        os.system("ipconfig/flushdns")  \n        print("DNS\u5237\u65b0\u6210\u529f")  \n        return True  \n    except Exception:  \n        traceback.print_exc()  \n        return False  \n  \n  \nif __name__ == \'__main__\':  \n    try:  \n        is_admin = ctypes.windll.shell32.IsUserAnAdmin()  \n        if not is_admin:  \n            # \u89e3\u51b3\u65e0\u6743\u8bbf\u95ee\u7684\u95ee\u9898\uff0c\u91cd\u65b0\u4ee5\u7ba1\u7406\u5458\u6743\u9650\u8fd0\u884c  \n            ctypes.windll.shell32.ShellExecuteW(None, "runas", sys.executable, __file__, None, 1)  \n        # \u8fd9\u91cc\u5982\u679c\u4f7f\u7528asyncio.run(main())\u4f1a\u62a5\u9519\uff0c\u4e0d\u77e5\u9053\u539f\u56e0  \n        loop = asyncio.get_event_loop()  \n        loop.run_until_complete(main())  \n        ret = save()  \n        if ret:  \n            print("Succeeded!!")  \n        else:  \n            print("Failed!!")  \n    except Exception as e:  \n        traceback.print_exc()  \n        print("Failed!!")  \n    finally:  \n        input("\\nPlease press Enter to exit!")\n')),(0,a.kt)("h2",{id:"\u811a\u672c\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6"},"\u811a\u672c\u6253\u5305\u6210\u53ef\u6267\u884c\u6587\u4ef6"),(0,a.kt)("p",null,"\u63a8\u8350\u4f7f\u7528\u865a\u62df\u73af\u5883\uff0c\u8fde\u540c\u6a21\u5757\u4e00\u8d77\u6253\u5305\uff0c\u4f7f\u5f97\u811a\u672c\u80fd\u5728\u4efb\u4f55\u673a\u5668\u4e0a\u6267\u884c\u800c\u4e0d\u7528\u518d\u5b89\u88c5\u73af\u5883"),(0,a.kt)("p",null,"\u5b89\u88c5pipenv  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"# \u521b\u5efa\u865a\u62df\u73af\u5883\npipenv --python 3.8 \n\n# \u67e5\u770b\u4f9d\u8d56\u5305\npipenv list\n\n# \u6253\u5305\npyinstaller -F \u811a\u672c\u6587\u4ef6\u8def\u5f84\n")))}u.isMDXComponent=!0}}]);